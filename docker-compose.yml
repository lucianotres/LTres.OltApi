services:
  mongodb:
    container_name: mongodb
    image: mongo:4.4
    restart: always
    volumes:
      - ltres_oltapi_data:/data/db
    ports:
      - 27017:27017
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
  
  rabbit:
    container_name: rabbit
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  webapi:
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    build: 
      context: .
      dockerfile: ./LTres.Olt.Api.webapi/Dockerfile
      args:
        - VERSION=0.0.1.10
    ports:
      - 5000:5000
  
  workercontroller1:
    depends_on:
      mongodb:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    build: 
      context: .
      dockerfile: ./LTres.Olt.Api.controller/Dockerfile
      args:
        - VERSION=0.0.0.10

  # workercontroller2:
  #   depends_on:
  #     - mongodb
  #     - rabbit
  #   build: 
  #     context: .
  #     dockerfile: ./LTres.Olt.Api.controller/Dockerfile

  worker1:
    depends_on:
      - rabbit
    build: 
      context: .
      dockerfile: ./LTres.Olt.Api.worker/Dockerfile
      args:
        - VERSION=0.0.1.10
    environment:
      - LTRES_MOCKING=true
  
  # worker2:
  #   depends_on:
  #     - rabbit
  #   build: 
  #     context: .
  #     dockerfile: ./LTres.Olt.Api.worker/Dockerfile

  # worker3:
  #   depends_on:
  #     - rabbit
  #   build: 
  #     context: .
  #     dockerfile: ./LTres.Olt.Api.worker/Dockerfile

  # worker4:
  #   depends_on:
  #     - rabbit
  #   build: 
  #     context: .
  #     dockerfile: ./LTres.Olt.Api.worker/Dockerfile

volumes:
  ltres_oltapi_data: